// Generated by CoffeeScript 1.3.3

/*

DATATABLES
==========

The main function here is `activate_table`. Simplest usage is::

    activate_table('the_table_id')

Options can also be provided::

    options = ['paginate', 'filter']
    activate_table('the_table_id', options)

Available options:

    *   paginate            pagination
    *   filter              search bar
    *   infos               infos
    *   auto_width          activate max width

AJAX table populating is equally easy. Let's imagine we want to display in a
table the results of an API call (in our example, let's say we receive back a
list of member objects and we want to display their member ID and name). We 
simply pass in a third argument with the AJAX request URL and the columns we
want to display::

    data = 
        source: '/lookup?q=members'
        columns:
            Member ID:
                key: 'id'
            Name:
                key: 'full_name'
    options = []
    activate_table('the_table_id', options, data)

It is also possible to display toggable details for each row by specifying
a details key on the data argument.

Technical API:

The data object must have the following attributes:

    *   source              the url of the AJAX GET request
    *   columns             the columns
    *   details (optional)  details that can be toggled for each row

Columns and details are objects where each attribute corresponds to a column /
detail name and contains an object with the following attributes:

For columns and details:

    *   key                 attribute name in the AJAX response (for nested
                            properties, use 'level1.level2.prop' syntax)
Only for columns:

    *   special (optional)  options for special formatting (cf below)
    *   width (optional)    width of the column

The special object can have the following attributes:

    *   url                 the key of the url to which the column text will
                            be pointed to (attribute of row)
    *   label               a function determining the class of the label to
                            apply (must return 'success', 'info', etc.)
*/


(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.activate_table = function(table_id, options, data) {
    var activated_table, ajax_options, attr, column, columns, details_opener_column, row_details, specialize_row, table, table_options, th, _ref;
    if (options == null) {
      options = null;
    }
    if (data == null) {
      data = null;
    }
    table = $('#' + table_id);
    table_options = {
      bPaginate: (options != null ? options.paginate : void 0) != null,
      bLengthChange: false,
      bFilter: (options != null ? options.filter : void 0) != null,
      bSort: true,
      bInfo: (options != null ? options.info : void 0) != null,
      bAutoWidth: (options != null ? options.auto_width : void 0) != null,
      iDisplayLength: 50
    };
    if (!data) {
      return $(table).dataTable(table_options);
    } else {
      columns = [];
      th = '<thead><tr>';
      _ref = data.columns;
      for (attr in _ref) {
        column = _ref[attr];
        if ('width' in column) {
          th += "<th width='" + column.width + "'>" + attr + "</th>";
        } else {
          th += "<th>" + attr + "</th>";
        }
        columns.push({
          mData: column.key
        });
      }
      th += '</tr></thead><tbody></tbody>';
      table.html(th);
      specialize_row = function(row, row_data, row_index) {
        var col, col_name, html, i, lc, tds, url, _ref1, _ref2, _ref3, _ref4;
        if (row_data.id != null) {
          $(row).attr('id', "row_" + row_data.id);
        }
        tds = $(row).children('td');
        i = 0;
        _ref1 = data.columns;
        for (col_name in _ref1) {
          col = _ref1[col_name];
          html = $(tds[i]).html();
          if (((_ref2 = col.special) != null ? _ref2.label : void 0) != null) {
            lc = col.special.label(row_data);
            html = "<span class='label label-" + lc + "'>" + html + "</span>";
          }
          if (((_ref3 = col.special) != null ? _ref3.url : void 0) != null) {
            url = row_data[col.special.url];
            html = "<a href='" + url + "'>" + html + "</a>";
          }
          if (((_ref4 = col.special) != null ? _ref4.bar : void 0) != null) {
            html = '';
          }
          $(tds[i]).html(html);
          i++;
        }
        if (data.details != null) {
          return $(row).children(':last').html('<a href="#" class="label" data-toggle="row">\
                    <i class="icon-plus-sign icon-white"></i></a>');
        }
      };
      ajax_options = {
        bProcessing: true,
        sAjaxDataProp: 'result',
        sAjaxSource: data.source,
        aoColumns: columns,
        aaSorting: [[0, 'asc']],
        fnCreatedRow: specialize_row
      };
      $.extend(table_options, ajax_options);
      if (!data.details) {
        return activated_table = $(table).dataTable(table_options);
      } else {
        $(table).find('tr').each(function() {
          return $(this).append('<th style="width: 40px; padding: 0;">\
                    <span class="label label-info">\
                    <i class="icon-info-sign icon-white"></i>\
                    </span></th>');
        });
        details_opener_column = {
          mData: null,
          bSortable: false,
          sClass: 'center',
          aTargets: [0]
        };
        table_options.aoColumns.push(details_opener_column);
        row_details = function(table, row, details) {
          var detail, k, key, rd, row_data, rv, _i, _len;
          row_data = table.fnGetData(row);
          rv = '<dl class="dl-horizontal">';
          for (attr in details) {
            detail = details[attr];
            rv += "<dt>" + attr + "</dt>";
            key = detail.key.split('.');
            rd = row_data;
            for (_i = 0, _len = key.length; _i < _len; _i++) {
              k = key[_i];
              rd = rd[k];
            }
            rv += "<dd>" + rd + "</dd>";
          }
          rv += '</dl>';
          return rv;
        };
        activated_table = $(table).dataTable(table_options);
        return table.find('[data-toggle=row]').live('click', function(event) {
          var icon, row;
          row = $(this).parents('tr')[0];
          if (activated_table.fnIsOpen(row)) {
            $(this).removeClass('label-warning');
            icon = $(this).find('i');
            icon.removeClass('icon-minus-sign');
            icon.addClass('icon-plus-sign');
            return activated_table.fnClose(row);
          } else {
            $(this).addClass('label-warning');
            icon = $(this).find('i');
            icon.removeClass('icon-plus-sign');
            icon.addClass('icon-minus-sign');
            return activated_table.fnOpen(row, row_details(activated_table, row, data.details), 'row-details');
          }
        });
      }
    }
  };

  /*
  
  AUTOCOMPLETE
  ============
  
  Example usage::
  
      window.activate_autocomplete(
          'the_form_id',
          '/the_lookup_url',
              q: 'autocomplete',
          ['with_categories']
      )
  */


  window.activate_autocomplete = function(form_id, url, query, options) {
    var attr, extractLast, split;
    if (__indexOf.call(options, 'categories') >= 0) {
      attr = 'catcomplete';
      $.widget('custom.catcomplete', $.ui.autocomplete, {
        _renderMenu: function(ul, items) {
          var currentCategory,
            _this = this;
          currentCategory = '';
          return $.each(items, function(index, item) {
            if (item.category !== currentCategory) {
              ul.append("<li class='ui-autocomplete-category'>                                " + item.category + "</li>");
              currentCategory = item.category;
            }
            return _this._renderItem(ul, item);
          });
        }
      });
    } else {
      attr = 'autocomplete';
    }
    if (__indexOf.call(options, 'multiple') >= 0) {
      split = function(val) {
        return val.split(/,\s*/);
      };
      extractLast = function(term) {
        return split(term).pop();
      };
      return $('#' + form_id).bind('keydown', function(event) {
        if (event.keyCode === $.ui.keyCode.TAB && $(this).data('autocomplete').menu.active) {
          return event.preventDefault();
        }
      }).autocomplete({
        minLength: 1,
        source: function(request, response) {
          query.input = extractLast(request.term);
          return $.getJSON(url, query, function(data) {
            return response(data['result']);
          });
        },
        focus: function() {
          return false;
        },
        select: function(event, ui) {
          var terms;
          terms = split(this.value);
          terms.pop();
          terms.push(ui.item.value);
          this.value = terms.join(', ') + ', ';
          return false;
        }
      });
    } else {
      return $('#' + form_id)[attr]({
        minLength: 2,
        delay: 100,
        source: function(request, response) {
          query.input = request.term;
          return $.getJSON(url, query, function(data) {
            return response(data['result']);
          });
        }
      });
    }
  };

}).call(this);
